name: Deploy to Firebase App Distribution

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      # - name: Install dependencies
      #   run: |
      #     npm ci
      #     cd android
      #     bundle install

      # - name: Install Fastlane plugins
      #   run: |
      #     cd android
      #     bundle update fastlane
      #     bundle exec fastlane add_plugin firebase_app_distribution

      - name: Decode Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          mkdir -p android/app
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/release.keystore

      - name: Create .env file
        env:
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_CLI_TOKEN: ${{ secrets.FIREBASE_CLI_TOKEN }}
          FIREBASE_GROUPS: ${{ secrets.FIREBASE_GROUPS }}
        run: |
          echo "FIREBASE_APP_ID=\"$FIREBASE_APP_ID\"" > android/.env
          echo "FIREBASE_CLI_TOKEN=\"$FIREBASE_CLI_TOKEN\"" >> android/.env
          echo "FIREBASE_GROUPS=\"$FIREBASE_GROUPS\"" >> android/.env
          echo "PROJECT_ROOT=\"$GITHUB_WORKSPACE\"" >> android/.env
          echo "APK_PATH=\"\"" >> android/.env

          # Also create the same file in fastlane directory
          mkdir -p android/fastlane
          cp android/.env android/fastlane/.env

      - name: Build Android Release
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew assembleRelease

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CLI_TOKEN }}
          groups: ${{ secrets.FIREBASE_GROUPS }}
          file: android/app/build/outputs/apk/release/app-release-unsigned.apk

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 7

      - name: Increment Version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./advancedmlappreactnative/package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if version has build number format (x.y.z+n)
          if [[ $CURRENT_VERSION == *"+"* ]]; then
            # Split version and build number
            VERSION_PART=$(echo $CURRENT_VERSION | cut -d'+' -f1)
            BUILD_PART=$(echo $CURRENT_VERSION | cut -d'+' -f2)

            # Split version into components
            IFS='.' read -r -a VERSION_ARRAY <<< "$VERSION_PART"
            MAJOR="${VERSION_ARRAY[0]}"
            MINOR="${VERSION_ARRAY[1]}"
            PATCH="${VERSION_ARRAY[2]}"

            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            # Increment build number
            NEW_BUILD=$((BUILD_PART + 1))

            # Create new version string
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH+$NEW_BUILD"
          else
            # Split version into components
            IFS='.' read -r -a VERSION_ARRAY <<< "$CURRENT_VERSION"
            MAJOR="${VERSION_ARRAY[0]}"
            MINOR="${VERSION_ARRAY[1]}"
            PATCH="${VERSION_ARRAY[2]}"

            # Increment patch version
            NEW_PATCH=$((PATCH + 1))

            # Create new version string with build number
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH+1"
          fi

          echo "New version: $NEW_VERSION"

          # Update package.json with new version
          node -e "const fs = require('fs'); const packageJson = require('./advancedmlappreactnative/package.json'); packageJson.version = '$NEW_VERSION'; fs.writeFileSync('./advancedmlappreactnative/package.json', JSON.stringify(packageJson, null, 2) + '\n');"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit Version Changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add advancedmlappreactnative/package.json
          git commit -m "Bump version to ${{ steps.version.outputs.version }} [skip ci]"
          git push
